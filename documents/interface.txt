*Manage Car*

class car:

      -this is the class represents a car in the company 
Attributes:

   -Brand (string): brand of car that should be added in company.
   -model(string):  model of car that should be added in company 
   -registrationNumber(string): registration no of car that should be added in company 
Methods:

 void addCar(vector<Car> &cars)
     -vector to store the information of car.
     -take input from user using attributes defined in class.

  void removeCar(vector<Car>& carList) 
       -removing a car from the list of cars in the car rental management system. 
       -It takes a reference to a vector of Car objects (carList) as its parameter.
       -registrationNumber(string)-this takes reg no of car that should have to be remove from the company .

*Manage Subscriber*
Classes:  

1. Subscriber: 

   - Attributes: 

     - name (string): Name of the subscriber.  
     -id(string) : Id of the subscriber.

     - level  (SubscriptionLevel): Current subscription level of the subscriber.  

     - maxCars (int): Maximum number of cars the subscriber can rent simultaneously.  

     - discount (double): Discount percentage applicable to the subscriber.  

   - Methods: 

     - getName() const: Returns the name of the subscriber.  
     -getID() const : Returns the id of the subscriber.
     - getLevel() const: Returns the subscription level of the subscriber.  

     - getMaxCars() const : Returns the maximum number of cars the subscriber can rent.  

     - getDiscount() const : Returns the discount percentage applicable to the subscriber.  

     - setLevel(SubscriptionLevel newLevel)  : Sets the subscription level of the subscriber.  

2. CarRentalSystem: 

   - Attributes: 

     - subscribers (vector<Subscriber>): Vector to store all subscribers.  

   - Methods: 

     - addSubscriber(string name, string id,SubscriptionLevel level): Adds a new subscriber with the specified name,id and subscription level.  

     - removeSubscriber(string id): Removes the subscriber with the specified name from the system.  

     -promoteSubscriber(string id, int newLevel): Promotes the subscription level of the subscriber with the specified name.  

     - levelToString(SubscriptionLevel level): Helper method to convert SubscriptionLevel enum to string.  


*Manage subscription*
      
      a) Rent a car:
            void rentCar(vector<Car> &cars,vector<Car> &rentedCar,vector<int> &amount,string subscriberLevel)
                  -The available list of cars is stored in the form of vector and that vector is given as a parameter to view the available list of cars.
                  -The customer should subscribe in order to rent a car.
                        (*Silver subscription-Can rent upto 1 car.
                         *Gold subscription-Can rent upto 2 cars.
                         *Platinum subscription-Can rent upto 3 cars.)
                        This subscriber level is given as a parameter with the name subscriberLevel.
                  - Two more vectors are given as parameters.
                  -The customer can rent a car from the available list of cars.
      b) Return a car:
            void returnCar(vector<Car> &cars,vector<int> &amount,string brandName,string regNum)
                   -The cars list in the form of vector is given as one of the parameters.
                   - The vector containing the amounts is given as parameter.
                   -The brand name and registration number are taken from the users and given as parameters.
                   -The customer can return a car upon his deadline.
      c) Extend the rental period:
            void extendRental(vector<Car> &cars,vector<int> &amount,string brandName,string num)
                   -The cars list in the form of vector is given as one of the parameters.
                   -The vector containing the amounts is given as parameter.
                   -The brand name and registration number are taken from the users and given as parameters.
                   -If the given credentials matches,the customer can extend the rental period of the car.
      d) Return to main menu:
      

4.Reports
      reports()
      {
          a) See available  cars list:
                void displayCars(vector<Car> &cars)
                    -All the cars are displayed with brand name, model and registration number  which we get from the cars vector.
          b) See cars under rental now:
                void displayRentedCars(vector<Car> &Rentedcars)
                    -All the rented cars are displayed with brand name, model and registration number  which we get from the RentedCars vector.
          c) See the subscribers list:
                void displaySubscribers(vector<Subscriber> subscribers)
                    -The list of subscribers is displayed with the name and subscriber level  which we get from the subscribers vector.
          d) See curent subscription book:
                void displayCurrentSubscription(vector<Car>& RentedCars)
                    -List of subscribers who have rented a car with model, registration number and subscriber which we get from the RentedCars vector.
          e) See  the revenue so far:
                 void displayRevenue(vector<Car>& RentedCars)
                    -Total revenue of the car rental system is displayed by summing the revenue of individual cars  which we get from the RentedCars vector.
          f) Return to main menu:
      }

 

